"use strict";(globalThis.webpackChunkatelier=globalThis.webpackChunkatelier||[]).push([[478],{8207:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>a,contentTitle:()=>l,default:()=>h,frontMatter:()=>r,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"development/ssh-to-wsl","title":"Enabling SSH Access to Windows Subsytem for Linux (WSL)","description":"WSL provides a way to run a Linux environment within Windows, which can be useful for software development, especially when installing a full Linux system isn\u2019t an option. Still, if Windows isn\'t exactly your favourite place to code and this kind of setup is inevitable, another workaround is to setup the WSL as a remote server and connect from your preferred development machine.","source":"@site/docs/development/ssh-to-wsl.md","sourceDirName":"development","slug":"/development/ssh-to-wsl","permalink":"/perpus/development/ssh-to-wsl","draft":false,"unlisted":false,"tags":[{"inline":true,"label":"How-to Guide","permalink":"/perpus/tags/how-to-guide"},{"inline":true,"label":"WSL","permalink":"/perpus/tags/wsl"},{"inline":true,"label":"Windows","permalink":"/perpus/tags/windows"}],"version":"current","lastUpdatedAt":1746057600000,"frontMatter":{"sidebar_label":"SSH to WSL","tags":["How-to Guide","WSL","Windows"],"last_update":{"date":"2025-05-01T00:00:00.000Z"}},"sidebar":"docsSidebar","previous":{"title":"llama-cpp-python","permalink":"/perpus/llama-cpp-python"}}');var i=s(7259),o=s(9087);const r={sidebar_label:"SSH to WSL",tags:["How-to Guide","WSL","Windows"],last_update:{date:new Date("2025-05-01T00:00:00.000Z")}},l="Enabling SSH Access to Windows Subsytem for Linux (WSL)",a={},d=[{value:"Enable SSH Server in WSL",id:"enable-ssh-server-in-wsl",level:3},{value:"Allow port in the Windows Firewall Host",id:"allow-port-in-the-windows-firewall-host",level:3},{value:"Option 1: WSL NAT Mode (Default)",id:"option-1-wsl-nat-mode-default",level:3},{value:"Forward Windows Port to WSL",id:"forward-windows-port-to-wsl",level:4},{value:"Optional: Create Startup Script",id:"optional-create-startup-script",level:4},{value:"Option 2: WSL Mirrored Mode",id:"option-2-wsl-mirrored-mode",level:3},{value:"Connect Remotely via SSH",id:"connect-remotely-via-ssh",level:3},{value:"Optional: Login with SSH Key",id:"optional-login-with-ssh-key",level:3},{value:"Important : Disable WSL Auto-Shutdown",id:"important--disable-wsl-auto-shutdown",level:3}];function c(e){const n={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h3:"h3",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"enabling-ssh-access-to-windows-subsytem-for-linux-wsl",children:"Enabling SSH Access to Windows Subsytem for Linux (WSL)"})}),"\n",(0,i.jsx)(n.p,{children:"WSL provides a way to run a Linux environment within Windows, which can be useful for software development, especially when installing a full Linux system isn\u2019t an option. Still, if Windows isn't exactly your favourite place to code and this kind of setup is inevitable, another workaround is to setup the WSL as a remote server and connect from your preferred development machine."}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsx)(n.p,{children:"This assume WSL already installed, and preferrably with Ubuntu."}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"enable-ssh-server-in-wsl",children:"Enable SSH Server in WSL"}),"\n",(0,i.jsx)(n.p,{children:"First, install and configure the SSH Server:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"sudo apt update && sudo apt install openssh-server -y\n"})}),"\n",(0,i.jsx)(n.p,{children:"Edit the ssh server config:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",metastring:'title="/etc/ssh/sshd_config.d/wsl.conf"',children:"Port 2222\nPasswordAuthentication yes\nPubkeyAuthentication yes\n"})}),"\n",(0,i.jsx)(n.p,{children:"This enable ssh in the port 2222, supporting password and key authentication methods."}),"\n",(0,i.jsx)(n.p,{children:"Then start the ssh service and enable it on startup:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"sudo systemctl enable ssh\n"})}),"\n",(0,i.jsx)(n.h3,{id:"allow-port-in-the-windows-firewall-host",children:"Allow port in the Windows Firewall Host"}),"\n",(0,i.jsx)(n.p,{children:"In PowerShell terminal as Administrator, add a firewall rule:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-powershell",children:'New-NetFirewallRule -DisplayName "WSL SSH Proxy" -Direction Inbound -LocalPort 2222 -Protocol TCP -Action Allow\n'})}),"\n",(0,i.jsx)(n.h3,{id:"option-1-wsl-nat-mode-default",children:"Option 1: WSL NAT Mode (Default)"}),"\n",(0,i.jsx)(n.p,{children:"This option involves forwarding a port on the Windows host to the SSH server running within the WSL virtual network."}),"\n",(0,i.jsx)(n.h4,{id:"forward-windows-port-to-wsl",children:"Forward Windows Port to WSL"}),"\n",(0,i.jsx)(n.p,{children:"Still in PowerShell terminal, run:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-powershell",children:"netsh interface portproxy add v4tov4 listenport=2222 listenaddress=0.0.0.0 connectport=2222 connectaddress=$(wsl hostname -I).split()[0].trim()\n"})}),"\n",(0,i.jsxs)(n.p,{children:["With ",(0,i.jsx)(n.code,{children:"wsl hostname -I"})," it possible to make the ip discovery dynamic."]}),"\n",(0,i.jsx)(n.h4,{id:"optional-create-startup-script",children:"Optional: Create Startup Script"}),"\n",(0,i.jsx)(n.p,{children:"To make WSL and port fowarding persist across reboots, create a simple script:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-powershell",metastring:'title="C:\\scripts\\wsl-portproxy.ps1"',children:"# clean up existing rule\nnetsh interface portproxy delete v4tov4 listenport=2222 listenaddress=0.0.0.0\n\n# get WSL IP + boot WSL at the same time\n$wslIp = (wsl hostname -I).split()[0].trim()\n\n# port forward from Windows:2222 -> WSL:2222\nnetsh interface portproxy add v4tov4 listenport=2222 listenaddress=0.0.0.0 connectport=2222 connectaddress=$wslIp\n"})}),"\n",(0,i.jsx)(n.p,{children:"Then set it to run at startup in the task scheduler:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Open ",(0,i.jsx)(n.strong,{children:"Task Scheduler"})]}),"\n",(0,i.jsxs)(n.li,{children:["Click ",(0,i.jsx)(n.strong,{children:"Create Task"})]}),"\n",(0,i.jsxs)(n.li,{children:["General Tab: Set name, e.g ",(0,i.jsx)(n.code,{children:"WSL Port Forwarding"})," and check ",(0,i.jsx)(n.strong,{children:"Run with highest privileges"})]}),"\n",(0,i.jsxs)(n.li,{children:["Triggers Tab: New -> Begin the task ",(0,i.jsx)(n.strong,{children:"At startup"})]}),"\n",(0,i.jsxs)(n.li,{children:["Action Tab: New -> Start a program","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Program/script: ",(0,i.jsx)(n.code,{children:"powershell"})]}),"\n",(0,i.jsxs)(n.li,{children:["Add arguments: ",(0,i.jsx)(n.code,{children:'-ExecutionPolicy Bypass -File "C:\\scripts\\wsl-portproxy.ps1"'})]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"option-2-wsl-mirrored-mode",children:"Option 2: WSL Mirrored Mode"}),"\n",(0,i.jsx)(n.p,{children:"When WSL is configured in mirrored mode, it shares the network namespace with the Windows host, simplifying network access."}),"\n",(0,i.jsx)(n.p,{children:"To enable the mirrored mode, edit the config within the WSL distribution:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",metastring:'title="/etc/wsl.conf"',children:"[wsl2]\nnetworkingMode=mirrored\n"})}),"\n",(0,i.jsxs)(n.p,{children:["After restarting, the SSH server running on port ",(0,i.jsx)(n.code,{children:"2222"})," within WSL should be directly accessible on Windows IP address.\nNo additional port forwarding is required in this mode."]}),"\n",(0,i.jsx)(n.h3,{id:"connect-remotely-via-ssh",children:"Connect Remotely via SSH"}),"\n",(0,i.jsx)(n.p,{children:"After setup, the WSL instance should be accessible via SSH from another machine:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"ssh -p 2222 <wslusername>@<windowsip>\n"})}),"\n",(0,i.jsx)(n.h3,{id:"optional-login-with-ssh-key",children:"Optional: Login with SSH Key"}),"\n",(0,i.jsx)(n.p,{children:"To enable key-based login, copy your SSH public key into the WSL instance:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"ssh-copy-id -i /path/to/privatekey -p 2222 <wslusername>@<windowsip>\n"})}),"\n",(0,i.jsx)(n.h3,{id:"important--disable-wsl-auto-shutdown",children:"Important : Disable WSL Auto-Shutdown"}),"\n",(0,i.jsxs)(n.p,{children:["By default, WSL is configured to automatically shut down after a period of inactivity, which is controlled by the ",(0,i.jsx)(n.a,{href:"https://learn.microsoft.com/en-us/windows/wsl/wsl-config",children:(0,i.jsx)(n.code,{children:"vmIdleTimeout"})})," setting. This can cause issues for continuous access to the WSL instance or to enable setup to persist across reboots."]}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:["Setting ",(0,i.jsx)(n.code,{children:"vmIdleTimeout"})," to ",(0,i.jsx)(n.code,{children:"-1"})," doesn't helps."]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["A simple workaround for this is to install ",(0,i.jsx)(n.strong,{children:"Docker Desktop"}),". When you set up Docker Desktop with WSL2 as the backend, it ensures that WSL runs in the background even after you close the terminal."]}),"\n",(0,i.jsx)(n.p,{children:"After that, enable Docker Desktop to run on startup, and the setup should be good to go."})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},9087:(e,n,s)=>{s.d(n,{R:()=>r,x:()=>l});var t=s(6363);const i={},o=t.createContext(i);function r(e){const n=t.useContext(o);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),t.createElement(o.Provider,{value:n},e.children)}}}]);